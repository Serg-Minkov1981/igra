import pygame
import tkinter as tk
import random
import time
import subprocess
from tkinter import messagebox

# –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∏ –∏—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–¥—ã
colors = [
    ('–ö—Ä–∞—Å–Ω—ã–π', 'red'),
    ('–ó–µ–ª—ë–Ω—ã–π', 'green'),
    ('–°–∏–Ω–∏–π', 'blue'),
    ('–ñ—ë–ª—Ç—ã–π', 'yellow'),
    ('–§–∏–æ–ª–µ—Ç–æ–≤—ã–π', 'purple'),
    ('–û—Ä–∞–Ω–∂–µ–≤—ã–π', 'orange'),
    ('–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π', 'brown'),
    ('–°–µ—Ä—ã–π', 'gray'),
    ('–ë–æ—Ä–¥–æ–≤—ã–π', 'Maroon')
]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–≥—Ä—ã
attempts = 0
correct_answers = 0
total_attempts = 0
start_time = None
time_limit = 0
buttons = []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–ø—ã—Ç–æ–∫ –∏ –≤—Ä–µ–º–µ–Ω–µ–º
def start_game():
    global attempts, correct_answers, total_attempts, start_time, time_limit
    total_attempts = int(attempts_entry.get())
    time_limit = int(time_entry.get()) * 60 * 1000  # –ü–µ—Ä–µ–≤–æ–¥ –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
    attempts = 0
    correct_answers = 0
    start_time = int(time.time() * 1000)  # –í—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    attempts_label.config(text=f"–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {total_attempts - attempts}")
    result_label.config(text="")
    update_timer()
    pick_color()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ–≥–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ —Å –ª–æ–∂–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
def pick_color():
    global current_color_name, current_color_code, false_color_name
    if attempts < total_attempts:
        current_color_name, current_color_code = random.choice(colors)
        false_color_name = random.choice([color[0] for color in colors if color[0] != current_color_name])
        color_label.config(text=false_color_name, bg=current_color_code)
        randomize_button_colors()
    else:
        end_game()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
def randomize_button_colors():
    color_codes = [color[1] for color in colors]
    random.shuffle(color_codes)
    for i, button in enumerate(buttons):
        button.config(bg=color_codes[i], activebackground=color_codes[i])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∏–≥—Ä–æ–∫–∞
def check_answer(user_guess):
    global attempts, correct_answers
    if attempts < total_attempts:
        attempts += 1
        if user_guess == current_color_name:
            correct_answers += 1
        attempts_label.config(text=f"–ï–©–Å –ù–ï–ú–ù–û–ì–û: {total_attempts - attempts}")
        pick_color()

def end_game():
    elapsed_time = int(time.time() * 1000) - start_time
    if correct_answers == total_attempts:
        display_fireworks()
    else:
        display_dislike()
        # –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–Ω—Å–µ–π–≤–µ—Ä–∞ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –æ—à–∏–±–æ–∫
        subprocess.run(['python', 'C://Users//user//PycharmProjects//pythonProject2/telegram/matrix_screensaver.py'])  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–∫—Ä–∏–Ω—Å–µ–π–≤–µ—Ä–∞
    result_label.config(text=f"–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_answers} –∏–∑ {total_attempts}\n–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed_time / 1000:.2f} —Å–µ–∫—É–Ω–¥", fg="blue")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Å–∞–ª—é—Ç–∞
def display_fireworks():
    messagebox.showinfo("–†–µ–∑—É–ª—å—Ç–∞—Ç", "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! \nüéÜ –£–†–ê üéÜ" * 10)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∏–∑–ª–∞–π–∫–∞
def display_dislike():
    messagebox.showwarning("–†–µ–∑—É–ª—å—Ç–∞—Ç", "üëé \nüëé" * 10)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
def update_timer():
    global start_time
    elapsed_time = int(time.time() * 1000) - start_time
    remaining_time = time_limit - elapsed_time
    if remaining_time <= 0 or attempts >= total_attempts:
        end_game()
    else:
        timer_label.config(text=f"–í–†–ï–ú–Ø –ù–ï –í–ï–ß–ù–û: {remaining_time} –º—Å")
        root.after(1, update_timer)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 100 –º—Å

root = tk.Tk()
root.title("–£–≥–∞–¥–∞–π —Ü–≤–µ—Ç")

attempts_label = tk.Label(root, text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫:", font=('Arial', 16))
attempts_label.pack(pady=10)
attempts_entry = tk.Entry(root, font=('Arial', 16))
attempts_entry.pack(pady=10)

time_label = tk.Label(root, text="–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–º–∏–Ω—É—Ç—ã):", font=('Arial', 16))
time_label.pack(pady=10)
time_entry = tk.Entry(root, font=('Arial', 16))
time_entry.pack(pady=10)

start_button = tk.Button(root, text="–ü–û–ï–•–ê–õ–ò", command=start_game, font=('Arial', 16))
start_button.pack(pady=10)

color_label = tk.Label(root, text="–ù–∞–∂–º–∏ '–ü–û–ï–•–ê–õ–ò', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å", font=('Arial', 16), width=40, height=5)
color_label.pack(pady=20)

attempts_label = tk.Label(root, text="", font=('Arial', 16))
attempts_label.pack(pady=10)

timer_label = tk.Label(root, text="", font=('Arial', 16))
timer_label.pack(pady=10)

buttons_frame = tk.Frame(root)
buttons_frame.pack(pady=10)

for color_name, color_code in colors:
    button = tk.Button(buttons_frame, text=color_name, command=lambda c=color_name: check_answer(c), font=('Arial', 16), width=10)
    button.pack(side=tk.LEFT, padx=10, pady=10)
    buttons.append(button)

result_label = tk.Label(root, text="", font=('Arial', 16))
result_label.pack(pady=10)

root.mainloop()
